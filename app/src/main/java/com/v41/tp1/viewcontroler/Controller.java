package com.v41.tp1.viewcontroler;

import com.v41.tp1.modele.ChemicalComposition;
import com.v41.tp1.modele.PeriodicTable;
import com.v41.tp1.viewcontroler.portal.ViewPortal;

import java.io.InputStream;


/**
 * The controller handles the user's inputs using the ChemicalValidator.
 * After validation, the controller informs the view whether or not the
 * validation was successful.
 * <p>
 * If the validation was successful, the validated
 * molecule is sent to the Model who performs remaining operations.
 *
 * @see ChemicalComposition // The Model's primary method.
 * <p>
 * If, however, the validation fails, the controller informs the view
 * about the nature of the error.
 */
public enum Controller {
    /**
     * The instance of the Controller class.
     */
    INSTANCE;

    /**
     * The view as well as the model are instantiated in the Controller class
     * to offer maximum control to the Controller.
     * <p>
     * This represents the main instance of the view.
     */
    private View view;

    /**
     * This represents the main instance of the model.
     *
     * @see #view
     */
    private ChemicalComposition chemicalComposition;

    /**
     * This represents the response sent from the ChemicalValidator class
     * to the view concerning the detailed results of the validation operation.
     * <p>
     * The response is in the form of a string, which is contained in a
     * Wrapper class to allow the response to be returned without passing through
     * a method's "return".
     *
     * @see StringWrapper
     */
    private StringWrapper responseToUser;

    /**
     * Constructor for the class Controller. This constructor is private
     * to ensure the integrity of the class, since the class is a Singleton.
     */
    Controller()
    {
    }

    /**
     * Initialises all of the classes necessary attributes once when the application
     * is first launched.
     *
     * @param view represents the interface through which the user will interact with
     *             the rest of the application.
     * @param inputStream represents a file containing all details of the periodic table.
     */
    public void initialise(View view, InputStream inputStream) {
        this.view = view;
        responseToUser = new StringWrapper();
        chemicalComposition = new ChemicalComposition(this.view);
        PeriodicTable.INSTANCE.loadPeriodicTable(inputStream);
    }

    /**
     * Intermediary method called by the view after the user asks for his inputted
     * formula to be validated. This method calls the methods which will validate
     * the formula. If the formula is valid, the Tokens generated by the validation
     * step will be sent to the model for further treatment.
     *
     * @param chemicalFormula represents the user's input which requires validation.
     * @return returns the results of the validation operation.
     */
    public String processUserInput(String chemicalFormula) {
        responseToUser.content = "The chemical formula is valid.";
        if (ChemicalValidator.INSTANCE.validateChemicalFormula(chemicalFormula, responseToUser)) {
            chemicalComposition.initialise(ChemicalValidator.INSTANCE.getFormulaTokens());
        }
        return responseToUser.content;
    }

    /**
     * Method called when the theme is changed via the radioGroup.
     *
     * @param themeId The id of the desired theme.
     */
    public void changeTheme(int themeId)
    {
        chemicalComposition.changeTheme(themeId);
    }
}
